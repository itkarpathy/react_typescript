{"version":3,"sources":["images/shop.jpg","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","userAnswer","callback","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7da644d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/shop.0db57796.jpg\";","import QuestionCard from \"./components/QuestionCard\";\r\nimport {shuffleArray} from \"./utils\";\r\n\r\n\r\nexport type Question= {\r\n   category: string,\r\n   correct_answer: string,\r\n   difficulty: string,\r\n   incorrect_answers: string[],\r\n   question: string;\r\n   type: string\r\n}\r\n\r\nexport type QuestionState = Question & {answers: string[]}\r\n\r\nexport enum Difficulty{\r\n   EASY = \"easy\",\r\n   MEDIUM = \"medium\",\r\n   HARD = \"hard\"\r\n}\r\n\r\n\r\nexport const fetchQuizQuestions = async(amount: number,difficulty: Difficulty) =>{\r\n   const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`\r\n   const data = await(await fetch(endpoint)).json();\r\n   return data.results.map((question: Question) =>(\r\n      {\r\n         ...question,\r\n         answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n\r\n      }\r\n   ))\r\n}","export const shuffleArray = ( array: any[])=>\r\n[...array].sort(() => Math.random() - 0.5)","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;","import React from \"react\";\r\nimport {AnswerObject} from \"../App\";\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n   question: string;\r\n   answers: string[];\r\n   callback: (e:React.MouseEvent<HTMLButtonElement>) => void;\r\n   userAnswer: AnswerObject | undefined;\r\n   questionNr: number;\r\n   totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({question,answers,userAnswer,callback,questionNr,totalQuestions}) => (\r\n   <Wrapper>\r\n      <p className=\"number\">\r\n         Questions: {questionNr} / {totalQuestions}\r\n      </p>\r\n      <p dangerouslySetInnerHTML={{__html: question}}></p>\r\n      <div>\r\n         {answers.map(answer => (\r\n            <ButtonWrapper \r\n            key={answer}\r\n            correct={userAnswer?.correctAnswer === answer}\r\n            userClicked={userAnswer?.answer === answer}\r\n            >\r\n               <button disabled={userAnswer? true : false} value={answer} onClick={callback}>\r\n                  <span dangerouslySetInnerHTML={{__html: answer}}></span>\r\n               </button>\r\n            </ButtonWrapper>\r\n         ))}\r\n      </div>\r\n   </Wrapper>\r\n)\r\n\r\n\r\nexport default QuestionCard","import styled, { createGlobalStyle } from 'styled-components';\r\n//ts/ignore\r\nimport BGImage from './images/shop.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n  body {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n  * {\r\n    font-family: 'Catamaran', sans-serif;\r\n    box-sizing: border-box;\r\n    text-align: center;\r\n  }\r\n  h1 {\r\n    font-family: Fascinate Inline;\r\n    background-image: linear-gradient(180deg, #fff, #ea9d29);\r\n    font-weight: 400;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n\r\n  .start, .next {\r\n   cursor: pointer;\r\n  background: linear-gradient(180deg,#ffffff,#ffcc91);\r\n  border: 2px solid #d38558;\r\n  box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\r\n  border-radius: 10px;\r\n  margin: 0;\r\n  padding: 0.5rem 2.5rem;\r\n  outline: none;\r\n  }\r\n  .start {\r\n   max-width: 120px;\r\n  width: 100%;\r\n\r\n  }\r\n  .score{\r\n   color: wheat;\r\n  font-size: 2.5rem;\r\n  text-align: center;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  > p {\r\n    color: #fff;\r\n  }\r\n  .score {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n  .start, .next {\r\n   cursor: pointer;\r\n  background: linear-gradient(180deg,#ffffff,#ffcc91);\r\n  border: 2px solid #d38558;\r\n  box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\r\n  border-radius: 10px;\r\n  /* height: 40px; */\r\n  margin: 10px 36% auto;\r\n  padding: 0.5rem 1rem;\r\n  outline: none;\r\n  }\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n \r\n`;","import React,{useState} from 'react';\nimport {fetchQuizQuestions} from \"./API\";\nimport QuestionCard from \"./components/QuestionCard\"\nimport {QuestionState, Difficulty } from \"./API\"\nimport {GlobalStyle} from \"./App.styles\"\n\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string\n}\n \n\nconst TOTAL_QUESTIONS = 10;\n\nconst App =()=> {\n\n  const [loading,setLoading] = useState(false)\n  const [questions, setQuestions] = useState<QuestionState[]>([])\n  const [number,setNumber] = useState(0);\n  const [userAnswers,setUserAnswers] = useState<AnswerObject[]>([])\n  const [score,setScore] = useState(0)\n  const [gameOver,setGameOver] = useState(true)\n\n  console.log(questions)\n\n\n    const startTrivia = async () =>{\n      setLoading(true)\n      setGameOver(false)\n\n      const newQuestions = await fetchQuizQuestions(\n        TOTAL_QUESTIONS,Difficulty.EASY\n      )\n\n      setQuestions(newQuestions);\n      setUserAnswers([]);\n      setScore(0)\n      setNumber(0)\n      setLoading(false)\n\n    }\n\n    const checkAnswer = (e:React.MouseEvent<HTMLButtonElement>) =>{\n      if(!gameOver){\n        const answer = e.currentTarget.value\n\n        const correct = questions[number].correct_answer === answer;\n\n        if(correct) setScore(prev => prev + 1);\n\n        const answerObject = {\n          question: questions[number].question,\n          answer,\n          correct,\n          correctAnswer: questions[number].correct_answer\n        }\n        setUserAnswers(prev => [...prev,answerObject])\n      }\n\n\n    }\n\n    const nextQuestion = () =>{\n      const nextQuestion = number +1;\n      if(nextQuestion === TOTAL_QUESTIONS){\n        setGameOver(true)\n      } else {\n        setNumber(nextQuestion)\n      }\n    }\n\n    return(\n      <>\n      <GlobalStyle></GlobalStyle>\n    <div className=\"App\">\n      <h1>React Quiz</h1> \n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n         <button className=\"start\" onClick={startTrivia}>Start</button> \n      ) : null}\n\n      {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n      \n      {loading ? <p className=\"loading\">Loading more Questions...</p> : null}\n      {!loading && !gameOver && (\n      <QuestionCard \n      questionNr={number + 1}\n      totalQuestions = {TOTAL_QUESTIONS}\n      question={questions[number].question}\n      answers={questions[number].answers}\n      userAnswer={userAnswers ? userAnswers[number] : undefined}\n      callback={checkAnswer}\n      /> \n\n\n      )}\n     {!gameOver && !loading && userAnswers.length === number +1 && number !== TOTAL_QUESTIONS -1 ? (\n        <button className=\"next\" onClick={nextQuestion}>Next question</button>\n     ) : null}\n\n    </div>\n      </>\n    )}   \n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}